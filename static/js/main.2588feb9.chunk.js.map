{"version":3,"sources":["Components/CupTwo.jsx","App.js","serviceWorker.js","index.js"],"names":["scene","BabylonScene","props","componentDidMount","engine","BABYLON","canvas","addLight","addCamera","addModels","window","addEventListener","onWindowResize","runRenderLoop","render","event","resize","intensity","camera","Math","PI","Zero","inertia","angularSensibilityX","angularSensibilityY","attachControl","addGround","photoSphere","CreateSphere","skyboxMaterial","diffuseTexture","diffuseColor","specularColor","emissiveTexture","uOffset","backFaceCulling","material","faceUV","faceColors","lipColors","cup","CreateCylinder","diameterTop","diameterBottom","height","tessellation","hasVertexAlpha","position","y","lip","styroMaterial","state","useWireFrame","shouldAnimate","removeEventListener","this","style","width","innerWidth","innerHeight","ref","Component","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2588feb9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as BABYLON from \"babylonjs\";\r\n\r\nvar scene;\r\n/**\r\n * Example temnplate of using Babylon JS with React\r\n */\r\nclass BabylonScene extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { useWireFrame: false, shouldAnimate: false };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // start ENGINE\r\n    this.engine = new BABYLON.Engine(this.canvas, true);\r\n\r\n    //Create Scene\r\n    scene = new BABYLON.Scene(this.engine);\r\n\r\n    //--Light---\r\n    this.addLight();\r\n\r\n    //--Camera---\r\n    this.addCamera();\r\n\r\n    //--Meshes---\r\n    this.addModels();\r\n\r\n    //--Ground---\r\n    // this.addGround();\r\n\r\n    // Add Events\r\n    window.addEventListener(\"resize\", this.onWindowResize, false);\r\n\r\n    // Render Loop\r\n    this.engine.runRenderLoop(() => {\r\n      scene.render();\r\n    });\r\n\r\n    //Animation\r\n    // scene.registerBeforeRender(() => {\r\n    //   boxMesh.rotation.y += 0.01;\r\n    //   boxMesh.rotation.x += 0.01;\r\n    // });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\r\n  }\r\n\r\n  onWindowResize = event => {\r\n    this.engine.resize();\r\n  };\r\n\r\n  /**\r\n   * Add Lights\r\n   */\r\n  addLight = () => {\r\n    //---------- LIGHT---------------------\r\n    // Create a basic light, aiming 0,1,0 - meaning, to the sky.\r\n    var light = new BABYLON.HemisphericLight(\r\n      \"light1\",\r\n      new BABYLON.Vector3(0, 10, 0),\r\n      scene\r\n    );\r\n    light.intensity = 0.27;\r\n  };\r\n\r\n  /**\r\n   * Add Camera\r\n   */\r\n  addCamera = () => {\r\n    // ---------------ArcRotateCamera or Orbit Control----------\r\n    var camera = new BABYLON.ArcRotateCamera(\r\n      \"Camera\",\r\n      Math.PI,\r\n      Math.PI / 3,\r\n      10,\r\n      BABYLON.Vector3.Zero(),\r\n      scene\r\n    );\r\n    camera.inertia = 0;\r\n    camera.angularSensibilityX = 250;\r\n    camera.angularSensibilityY = 250;\r\n\r\n    // This attaches the camera to the canvas\r\n    camera.attachControl(this.canvas, true);\r\n    // camera.setPosition(new BABYLON.Vector3(5, 5, 5));\r\n  };\r\n\r\n  /**\r\n   * Create Stage and Skybox\r\n   */\r\n  addGround = () => {\r\n    //Add SkyBox\r\n    var photoSphere = BABYLON.Mesh.CreateSphere(\"skyBox\", 16.0, 50.0, scene);\r\n    var skyboxMaterial = new BABYLON.StandardMaterial(\"smat\", scene);\r\n    skyboxMaterial.diffuseTexture = new BABYLON.Texture(\r\n      \"assets/skybox.jpeg\",\r\n      scene,\r\n      1,\r\n      0\r\n    );\r\n    skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n    skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n    skyboxMaterial.emissiveTexture.uOffset = -Math.PI / 2; // left-right\r\n    skyboxMaterial.emissiveTexture.uOffset = 0.1; // up-down\r\n    skyboxMaterial.backFaceCulling = false;\r\n    photoSphere.material = skyboxMaterial;\r\n  };\r\n\r\n  /**\r\n   * Add Models\r\n   */\r\n  addModels = () => {\r\n    var faceUV = [];\r\n    faceUV[0] =\tnew BABYLON.Vector4(0, 0, 0, 0);\r\n    faceUV[1] =\tnew BABYLON.Vector4(1, 0, 0.32, 1);\r\n    faceUV[2] = new BABYLON.Vector4(0, 0, 0.25, 1);\r\n    var faceColors = [];\r\n    faceColors[1] = new BABYLON.Color4(1, 1, 1, 1);\r\n    faceColors[2] = new BABYLON.Color4(1, 1, 1, 0.6);\r\n    var lipColors = [];\r\n    lipColors[1] = new BABYLON.Color4(1, 1, 1, 1);\r\n    lipColors[2] = new BABYLON.Color4(1, 1, 1, 0.6);\r\n    lipColors[3] = new BABYLON.Color4(1, 1, 1, 0.6);\r\n\r\n    var cup = BABYLON.MeshBuilder.CreateCylinder(\"cone\", {diameterTop: 1.5, diameterBottom: 1.2, height: 2.4, tessellation: 24, faceUV: faceUV, faceColors: faceColors}, scene);\r\n    cup.hasVertexAlpha = true;\r\n    cup.position.y = 1;\r\n\r\n    var lip = BABYLON.MeshBuilder.CreateCylinder(\"cone\", {diameterTop: 1.54, diameterBottom: 1.54, height: 0.4, tessellation: 24, faceColors: lipColors}, scene);\r\n    lip.hasVertexAlpha = true;\r\n    lip.position.y = 2.1;\r\n\r\n\r\n    var styroMaterial = new BABYLON.StandardMaterial(\"styrofoam\", scene);\r\n    styroMaterial.emissiveTexture = new BABYLON.Texture(\r\n      \"http://localhost:3000/styrofoam.jpg\",\r\n      scene\r\n    );\r\n    \r\n    cup.material = styroMaterial;\r\n    lip.material = styroMaterial;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <canvas\r\n        style={{ width: window.innerWidth, height: window.innerHeight }}\r\n        ref={canvas => {\r\n          this.canvas = canvas;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default BabylonScene;","import React from 'react';\nimport './App.css';\nimport BabylonScene from './Components/CupTwo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BabylonScene />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}